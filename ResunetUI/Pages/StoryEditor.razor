@page "/fetchdata"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Моя статья</PageTitle>

@if (post is null)
{
    <p><em>Идёт загрузка статьи...</em></p>
}
else
{
    <div class="col-xs-12 mt-3">
        <select @bind="post.Status" class="text">
            @foreach (var item in PostStatusList)
            {
                <option value="(int)item.PostStatus">@item.Title</option>
            }
        </select>
    </div>

    <div class="col-xs-12 mt-3">
        <input type="text" @bind="post.Title" class="text" placeholder="Название статьи" />
    </div>

    <div class="col-xs-12 mt-3">
        <textarea type="text" @bind="post.Intro" class="text" placeholder="Описание" />
    </div>

    <div class="col-md-12 mt-3">
        <label>Текст статьи</label> 
        <div class="rich-editor">
            @{
                int index = 0;
            }

            @foreach (var item in post.ContentItems)
            {
                if (item.ContentItemType == ContentItem.ContentItemTypeEnum.Text)
                {
                    <textarea @bind="item.Value" rows="1" class="text" id="contentInput@(index)"
                              oninput="this.style.height='auto';this.style.height=(this.scrollHeight)px">
                                                                                                                                                                                                                </textarea>
                }

                index++;
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int? postid { get; set; }

    private PostData? post = null;

    protected override async Task OnInitializedAsync()
    {
        if ((postid ?? 0) == 0)
        {
            this.post = new PostData();
            this.post.ContentItems.Add(
                new ContentItem(ContentItem.ContentItemTypeEnum.Text)
            );
        }
        else
        {
            this.post = await Http.GetFromJsonAsync<PostData>("profile/postdata/" + (postid ?? 0).ToString());
        }
    }

    public class ContentItem
    {
        public enum ContentItemTypeEnum { Text, Image, Title }

        public ContentItem(ContentItemTypeEnum contenttype)
        {
            this.ContentItemType = contenttype;
        }

        public int? PostContentId { get; set; }

        public ContentItemTypeEnum ContentItemType { get; set; }

        public string Value { get; set; } = "";
    }

    public class PostData
    {
        public int PostId { get; set; }
        public string Title { get; set; } = "";
        public string Intro { get; set; } = "";
        public List<ContentItem> ContentItems { get; set; }
        public int Status { get; set; }
    }

    public enum PostStatusEnum { Private, Public };

    public class PostStatusListItem
    {
        public PostStatusListItem(PostStatusEnum postStatus, string title)
        {
            this.PostStatus = postStatus;
            this.Title = title;
        }

        public PostStatusEnum PostStatus { get; set; }

        public string Title { get; set; } = null!;
    }

    List<PostStatusListItem> PostStatusList = new List<PostStatusListItem>()
    {
        new PostStatusListItem(PostStatusEnum.Private, "Черновик"),
        new PostStatusListItem(PostStatusEnum.Public, "Опубликована")
    };
}