@page "/fetchstory"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Моя статья</PageTitle>

@if (post == null)
{
    <p><em>Идёт загрузка статьи...</em></p>
}
else
{
    <div class="col-xs-12">
        <select @bind="post.Status" class="text">
            @foreach (var item in PostStatusList)
            {
                <option value="@((int)item.PostStatus)">@item.Title</option>
            }
        </select>
    </div>

    <div class="col-xs-12 mt-3">
        <input type="text" @bind="post.Title" class="text" placeholder="Название статьи" />
    </div>

    <div class="col-xs-12 mt-3">
        <textarea @bind="post.Intro" class="text" placeholder="Описание"></textarea>
    </div>

    <div class="col-md-12 mt-3">
        <label>Текст статьи</label>
        <div class="rich-eritor">
            @{
                int index = 0;
            }

            @foreach (var item in post.ContentItems)
            {
                if (item.ContentItemType == ContentItem.ContentItemTypeEnum.Text)
                {
                    <textarea @bind="item.Value" rows="1" class="text" id="contentInput@(index)"
                              oninput="this.style.height='auto';this.style.height = (this.scrollHeight)+'px';"></textarea>
                }

                if (item.ContentItemType == ContentItem.ContentItemTypeEnum.Image)
                {
                    <div class="editpost-image">
                        @if (!String.IsNullOrEmpty(item.Value))
                        {
                            <img src="/data/empty-image.jpg" class="post-image" />
                        }
                        else
                        {
                            <img src="@item.Value" class="post-image" />
                        }
                        @if (isLoading == false)
                        {
                            <InputFile OnChange="async (InputFileChangeEventArgs e) => { await UploadFile(e, item); }"
                                       accept="image/x-png,image/jpeg" />
                        }
                    </div>
                }

                index++;
            }
        </div>
    </div>

    <div class="col-6">
        <button class="button" onclick="Save">Сохранить</button>
    </div>

    <div class="col-6 text-end">
        <button class="button" onclick="AddPicture">Добавить картинку</button>
    </div>
}

@code {
    [Parameter]
    public int? postid { get; set; }

    private bool isLoading = false;

    private PostData? post = null;

    protected override async Task OnInitializedAsync()
    {
        if ((postid ?? 0) == 0)
        {
            this.post = new PostData();
            this.post.ContentItems.Add(
                new ContentItem(ContentItem.ContentItemTypeEnum.Text)
            );
        }
        else
        {
            this.post = await Http.GetFromJsonAsync<PostData>("/profile/postdata/" + (postid ?? 0).ToString());
        }
    }

    public async Task Save()
    {
        if (post is null)
            return;

        var result = await Http.PutAsJsonAsync("/profile/post", this.post);
 
        
    }

    public async Task UploadFile(InputFileChangeEventArgs value, ContentItem item)
    {
        if (value.File is null)
            return;

        using (var ms = value.File.OpenReadStream(6 * 1024 * 1024))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data"); // чтобы запрос не накрылся
            content.Add(new StreamContent(ms, (int)ms.Length), "image", value.File.Name);
            item.Value = await this.UploadImage(content); // загружает на сервер изображение, возвращает имя загруженного файла
        };
    }

    public async Task<string> UploadImage(MultipartFormDataContent content)
    {
        this.isLoading = true;

        var result = await Http.PostAsync("/profile/posts/image", content);

        this.isLoading = false;

        if (result.IsSuccessStatusCode)
        {
            var postContent = await result.Content.ReadFromJsonAsync<PostImageResult>();
            return postContent.FileName ?? "";
        }
        return "";
    }

    private void AddPicture()
    {
        this.post?.ContentItems.Add(new ContentItem(ContentItem.ContentItemTypeEnum.Image));
        this.post?.ContentItems.Add(new ContentItem(ContentItem.ContentItemTypeEnum.Text));
    }

    private class PostImageResult
    {
        public string FileName { get; set; } = "";
    }

    public class ContentItem
    {
        public enum ContentItemTypeEnum { Text, Image, Title }

        public ContentItem(ContentItemTypeEnum contenttype)
        {
            this.ContentItemType = contenttype;
        }

        public int? PostContentId { get; set; }

        public ContentItemTypeEnum ContentItemType { get; set; }

        public string Value { get; set; } = "";
    }

    public class PostData
    {
        public int? PostId { get; set; }

        public string Title { get; set; } = "";

        public string Intro { get; set; } = "";

        public List<ContentItem> ContentItems { get; set; } = new List<ContentItem>();

        public int Status { get; set; }
    }

    public enum PostStatusEnum { Private, Public }

    public class PostStatusListItem
    {
        public PostStatusListItem(PostStatusEnum postStatus, string title)
        {
            this.PostStatus = postStatus;
            this.Title = title;
        }

        public PostStatusEnum PostStatus { get; set; }
        public string Title { get; set; } = null!;
    }

    List<PostStatusListItem> PostStatusList = new List<PostStatusListItem>() {
        new PostStatusListItem(PostStatusEnum.Private, "Черновик"),
        new PostStatusListItem(PostStatusEnum.Public, "Опубликована")
    };
}